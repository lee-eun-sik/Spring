<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="back.mapper.NewBoardMapper">
		
	<select id="getBoardList" parameterType="back.model.board.Board" resultType="back.model.NewBoard.NewBoard">
	    SELECT *
	    FROM (
	        SELECT ROWNUM AS RN, B.*
	        FROM (
	            SELECT
	                A.BOARD_ID,
	                A.TITLE,
	                A.CONTENT,
	                A.VIEW_COUNT,
	                A.CREATE_ID,   
	                A.UPDATE_ID,
	                TO_CHAR(A.CREATE_DT, 'YYYY-MM-DD') AS CREATE_DT,
	                TO_CHAR(A.UPDATE_DT, 'YYYY-MM-DD') AS UPDATE_DT,
	                A.DEL_YN
	            FROM NEWS_BOARD A
	            <where>
	                A.DEL_YN = 'N'
	                <if test="searchText != null and searchText != '' and searchColumn != null and searchColumn != ''">
	                    AND <choose>
	                        <when test="searchColumn == 'TITLE'">
	                            A.TITLE LIKE '%'||#{searchText}||'%' 
	                        </when>
	                        <when test="searchColumn == 'CREATE_ID'">
	                            A.CREATE_ID LIKE '%'||#{searchText}||'%'
	                        </when>
	                    </choose>
	                </if>
	            </where>
	            ORDER BY A.CREATE_DT DESC
	        ) B
	    ) C
	    WHERE C.RN BETWEEN #{startRow} AND #{endRow}
	</select>

    
    <select id="getTotalBoardCount" parameterType="back.model.board.Board" resultType="int">
	    SELECT COUNT(*)
	    FROM NEWS_BOARD A
	    <where>
	        A.DEL_YN = 'N'
	        <if test="searchText != null and searchText != '' and searchColumn != null and searchColumn != ''">
	            AND <choose>
	                <when test="searchColumn == 'TITLE'">
	                    A.TITLE LIKE '%'||#{searchText}||'%' 
	                </when>
	                <when test="searchColumn == 'CREATE_ID'">
	                    A.CREATE_ID LIKE '%'||#{searchText}||'%'
	                </when>
	            </choose>
	        </if>
	    </where>
	</select>



							<!-- parameterType 받는값타입      -->	
    <select id="getBoardById" parameterType="string" resultType="back.model.board.Board">
        SELECT
            BOARD_ID,
            TITLE,
            CONTENT,
            VIEW_COUNT,
            CREATE_ID,
            UPDATE_ID,
            CREATE_DT,
            UPDATE_DT,
            DEL_YN
        FROM NEWS_BOARD
        WHERE BOARD_ID = #{boardId}
    </select>

    <!-- 게시글 작성 -->
    <insert id="create" parameterType="back.model.board.Board">
	    INSERT INTO NEWS_BOARD (
	        BOARD_ID, TITLE, CONTENT, VIEW_COUNT, CREATE_ID, UPDATE_ID, CREATE_DT, UPDATE_DT, DEL_YN
	    )
	    VALUES (
	        NEWS_BOARD_SEQ.NEXTVAL,
	        #{title}, 
	        #{content}, 
	        0, 
	        #{createId, jdbcType=VARCHAR}, 
	        #{updateId, jdbcType=VARCHAR}, 
	        SYSDATE, 
	        SYSDATE, 
	        'N'
	    )
	        <selectKey keyProperty="boardId" resultType="string" order="AFTER">
	        	SELECT NEWS_BOARD_SEQ.CURRVAL FROM DUAL
	        </selectKey>
	</insert>
    
    <update id="update" parameterType="back.model.board.Board">
	    UPDATE NEWS_BOARD
	    SET TITLE = #{title},
	    CONTENT = #{content},
	    VIEW_COUNT = #{viewCount},
	    UPDATE_ID = #{updateId},
	    UPDATE_DT = SYSDATE
	    WHERE BOARD_ID = #{boardId}
    </update>
    
    <update id="delete" parameterType="back.model.board.Board">
	    DELETE FROM NEWS_BOARD
	    WHERE BOARD_ID = #{boardId}
    </update>
    
    <update id="viewCount" parameterType="back.model.board.Board">
	    UPDATE NEWS_BOARD
	    SET VIEW_COUNT = #{viewCount}
	    WHERE BOARD_ID = #{boardId}
    </update>
    
    
    <!-- 댓글 등록 -->
    <insert id="insertComment" parameterType="map">
	    INSERT INTO NEWS_BOARD_COMMENT (
	        COMMENT_ID,
	        BOARD_ID,
	        CONTENT,
	        CREATE_ID
	    )
	    VALUES (
	        NEWS_BOARD_SEQ.NEXTVAL,
	        #{boardId, jdbcType=VARCHAR},
	        #{content, jdbcType=VARCHAR},
	        #{createId, jdbcType=VARCHAR}
	    )
	</insert>
    
    <!-- 게시글에 대한 댓글 조회 (대댓글 포함) -->
    <select id="getCommentsByBoardId" parameterType="string" resultType="back.model.board.Comment">
        SELECT *
        FROM NEWS_BOARD_COMMENT
        WHERE BOARD_ID = #{boardId}
          AND DEL_YN = 'N'
        ORDER BY PARENT_COMMENT_ID, CREATE_DT ASC
    </select>
    
    <!-- 댓글 조회 -->
    <select id="getCommentById" parameterType="int" resultType="back.model.board.Comment">
        SELECT *
        FROM NEWS_BOARD_COMMENT
        WHERE COMMENT_ID = #{commentId}
          AND DEL_YN = 'N'
    </select>

    <!-- 댓글 수정 -->
    <update id="updateComment" parameterType="back.model.board.Comment">
        UPDATE NEWS_BOARD_COMMENT
        SET CONTENT = #{content},
            UPDATE_ID = #{updateId},
            UPDATE_DT = SYSDATE
        WHERE COMMENT_ID = #{commentId}
    </update>

    <!-- 댓글 삭제 -->
    <update id="deleteComment" parameterType="back.model.board.Comment">
        UPDATE NEWS_BOARD_COMMENT
        SET DEL_YN = 'Y',
        UPDATE_ID = #{updateId},
        UPDATE_DT = SYSDATE
        WHERE COMMENT_ID = #{commentId}
    </update>
    
</mapper>

