<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="back.mapper.user.UserMapper">
<resultMap id="userResultMap" type="back.model.user.User">
    <result property="usersId" column="USERS_ID"/>
    <result property="usersFileId" column="USERS_FILE_ID"/>
    <result property="usersName" column="USERS_NAME"/>
    <result property="usersPassword" column="USERS_PASSWORD"/>
    <result property="usersEmail" column="USERS_EMAIL"/>
    <result property="createId" column="CREATE_ID"/>
    <result property="updateId" column="UPDATE_ID"/>
    <result property="createDt" column="CREATE_DT"/>
    <result property="updateDt" column="UPDATE_DT"/>
    <result property="delYn" column="DEL_YN"/>
    
</resultMap>
	<!-- 사용자 ID로 사용자 정보 조회 -->
    <select id="getUserById" resultMap="userResultMap" parameterType="string">
	    SELECT USERS_ID,
	           USERS_FILE_ID,
	           USERS_NAME,
	           USERS_PASSWORD,
	           USERS_EMAIL,
	           CREATE_ID,
	           UPDATE_ID,
	           CREATE_DT,
	           UPDATE_DT
	    FROM USERS
	    WHERE USERS_ID = #{usersId}
	      AND DEL_YN = 'N'
	</select>

    <!-- 사용자 생성 -->

    <insert id="registerUser" parameterType="back.model.user.User">
	    INSERT INTO USERS (
	        USERS_ID, 
	        USERS_PASSWORD,
	        USERS_EMAIL,
	        CREATE_ID,
	        CREATE_DT,
	        DEL_YN,
	        USERS_NAME
	    ) VALUES (
	        #{usersId, jdbcType=VARCHAR}, 
	        #{usersPassword, jdbcType=VARCHAR}, 
	        #{usersEmail, jdbcType=VARCHAR},
	        #{createId, jdbcType=VARCHAR},
	        SYSDATE,
	        'N',
	        #{usersName, jdbcType=VARCHAR}
	    )
	</insert>


    <!-- 사용자 삭제 (논리 삭제) -->
    <update id="deleteUser" parameterType="string">
	    UPDATE USERS 
	    SET DEL_YN = 'Y',  
	        UPDATE_DT = SYSDATE  
	    WHERE USERS_ID = #{usersId} AND DEL_YN = 'N'
	</update>
	
	<select id="checkUserIdDuplicate" parameterType="string" resultType="int">
	    SELECT COUNT(*) 
	    FROM USERS
	    WHERE USERS_ID = #{usersId} AND DEL_YN = 'N'
	</select>
	<update id="updatePassword">
		UPDATE users
		SET users_password = #{encodedPassword}
		WHERE users_id = #{userId}
	</update>
	
	
	<select id="getAllUsers" resultMap="userResultMap">
	   SELECT 
		   USERS_ID,
		   USERS_NAME,
		   USERS_PASSWORD,
		   USERS_EMAIL,
		   CREATE_ID,
		   UPDATE_ID,
		   CREATE_DT,
		   UPDATE_DT,
		   DEL_YN
	   FROM USERS
	   WHERE USERS_ID = #{usersId}
	   AND DEL_YN = 'N'
	</select>
	
	<select id="findUsersByInfo" parameterType="map" resultType="back.model.user.User">
	    SELECT *
	    FROM users
	    WHERE users_email = #{usersEmail, jdbcType=VARCHAR}
	</select>
	
	
	<select id="findUserByUserIdAndEmail" resultMap="userResultMap" parameterType="map">
	    SELECT * FROM USERS 
	    WHERE USERS_ID = #{usersId, jdbcType=VARCHAR}
	    AND USERS_EMAIL = #{usersEmail, jdbcType=VARCHAR}
	</select>
	
	<select id="findByUserId" resultMap="userResultMap" parameterType="string">
	    SELECT USERS_ID, 
	           USERS_NAME, 
	           USERS_PASSWORD, 
	           USERS_EMAIL, 
	           CREATE_ID, 
	           UPDATE_ID, 
	           CREATE_DT, 
	           UPDATE_DT,
	           DEL_YN
	    FROM USERS
	    WHERE USERS_ID = #{usersId}
	      AND DEL_YN = 'N'
	</select>
	
	<!-- 이메일 주소로 사용자 목록 조회 -->
	<select id="selectUsersByEmail" resultMap="userResultMap" parameterType="string">
	    SELECT *
	    FROM USERS
	    WHERE USERS_EMAIL = #{usersEmail, jdbcType=VARCHAR}
	      AND DEL_YN = 'N'
	</select>
	
	<select id="selectByEmail" resultType="back.model.user.User" parameterType="String">
	    SELECT users_id, users_email, users_name, users_password
	    FROM users
	    WHERE users_email = #{usersEmail}
	      AND ROWNUM = 1
	</select>
	
	<select id="countByEmail" resultType="int" parameterType="String">
	    SELECT COUNT(*)
	    FROM users
	    WHERE users_email = #{usersEmail}
	</select>
</mapper>