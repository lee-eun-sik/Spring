<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="back.mapper.user.UserMapper">
<resultMap id="userResultMap" type="back.model.user.User">
    <result property="userId" column="USER_ID"/>
    <result property="username" column="USERNAME"/>
    <result property="password" column="PASSWORD"/>
    <result property="email" column="EMAIL"/>
    <result property="createId" column="CREATE_ID"/>
    <result property="updateId" column="UPDATE_ID"/>
    <result property="createDt" column="CREATE_DT"/>
    <result property="updateDt" column="UPDATE_DT"/>
    <result property="role" column="ROLE"/>
    <result property="gender" column="GENDER"/>        
    <result property="phonenumber" column="PHONENUMBER"/> 
    <result property="birthdate" column="BIRTH_DATE"/>
    <result property="delYn" column="DEL_YN"/>
    <result property="nickname" column="NICKNAME"/>
</resultMap>


    <!-- 사용자 생성 -->

    <insert id="registerUser" parameterType="back.model.user.User">
	    INSERT INTO USERS (
	        USER_ID, 
	        PASSWORD,
	        EMAIL,
	        CREATE_ID,
	        CREATE_DT,
	        ROLE,
	        DEL_YN,
	        NICKNAME
	    ) VALUES (
	        #{userId}, 
	        #{password},
	        #{email},
	        #{createId},
	        SYSDATE,
	        #{role, jdbcType=VARCHAR},
	        'N',
	        #{nickname}
	    )
	</insert>


    <!-- 사용자 삭제 (논리 삭제) -->
    <update id="deleteUser" parameterType="string">
	    UPDATE USERS 
	    SET DEL_YN = 'Y',  
	        UPDATE_DT = SYSDATE  
	    WHERE USER_ID = #{userId} AND DEL_YN = 'N'
	</update>
	
	<select id="checkUserIdDuplicate" resultType="int">
	    SELECT 
	        COUNT(*) 
	    FROM USERS
	    WHERE USER_ID = #{userId}
	      AND DEL_YN = 'N'
	</select>
	
	<update id="updatePassword">
		UPDATE users
		SET password = #{encodedPassword}
		WHERE user_id = #{userId}
	</update>
	<select id="getUserRoleById" parameterType="string" resultType="string">
	    SELECT ROLE 
	    FROM USERS 
	    WHERE USER_ID = #{userId}
	      AND DEL_YN = 'N'
	</select>
	
	<select id="getAllUsers" resultMap="userResultMap">
	   SELECT 
		   USER_ID,
		   USERNAME,
		   PASSWORD,
		   EMAIL,
		   PHONENUMBER,
		   GENDER,
		   CREATE_ID,
		   UPDATE_ID,
		   CREATE_DT,
		   UPDATE_DT,
		   ROLE,
		   BIRTH_DATE,
		   DEL_YN
	   FROM USERS
	   WHERE USER_ID = #{userId}
	   AND DEL_YN = 'N'
	</select>
	
	<select id="findUsersByInfo" parameterType="map" resultType="back.model.user.User">
	    SELECT *
	    FROM users
	    WHERE email = #{email, jdbcType=VARCHAR}
	</select>
	
	
	<select id="findUserByUserIdAndEmail" resultMap="userResultMap" parameterType="map">
	    SELECT * FROM USERS 
	    WHERE USER_ID = #{userId}
	    AND EMAIL = #{email}
	</select>
	
	<select id="findByUserId" resultMap="userResultMap" parameterType="string">
	    SELECT USER_ID, 
	           USERNAME, 
	           PASSWORD, 
	           EMAIL, 
	           PHONENUMBER,
	           GENDER,
	           BIRTH_DATE,
	           CREATE_ID, 
	           UPDATE_ID, 
	           CREATE_DT, 
	           UPDATE_DT, 
	           ROLE,
	           DEL_YN
	    FROM USERS
	    WHERE USER_ID = #{userId}
	      AND DEL_YN = 'N'
	</select>
	
	<!-- 이메일 주소로 사용자 목록 조회 -->
	<select id="selectUsersByEmail" resultMap="userResultMap" parameterType="string">
	    SELECT *
	    FROM USERS
	    WHERE EMAIL = #{email}
	      AND DEL_YN = 'N'
	</select>
</mapper>